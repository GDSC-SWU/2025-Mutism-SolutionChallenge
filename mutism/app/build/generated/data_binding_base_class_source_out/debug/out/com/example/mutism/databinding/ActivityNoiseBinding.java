// Generated by view binder compiler. Do not edit!
package com.example.mutism.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.mutism.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityNoiseBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final FrameLayout btnSelect;

  @NonNull
  public final LinearLayout noise;

  @NonNull
  public final RecyclerView recyclerViewNoises;

  @NonNull
  public final TextView tvQuestion;

  @NonNull
  public final TextView tvSelect;

  private ActivityNoiseBinding(@NonNull LinearLayout rootView, @NonNull FrameLayout btnSelect,
      @NonNull LinearLayout noise, @NonNull RecyclerView recyclerViewNoises,
      @NonNull TextView tvQuestion, @NonNull TextView tvSelect) {
    this.rootView = rootView;
    this.btnSelect = btnSelect;
    this.noise = noise;
    this.recyclerViewNoises = recyclerViewNoises;
    this.tvQuestion = tvQuestion;
    this.tvSelect = tvSelect;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityNoiseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityNoiseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_noise, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityNoiseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_select;
      FrameLayout btnSelect = ViewBindings.findChildViewById(rootView, id);
      if (btnSelect == null) {
        break missingId;
      }

      LinearLayout noise = (LinearLayout) rootView;

      id = R.id.recyclerView_noises;
      RecyclerView recyclerViewNoises = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewNoises == null) {
        break missingId;
      }

      id = R.id.tv_question;
      TextView tvQuestion = ViewBindings.findChildViewById(rootView, id);
      if (tvQuestion == null) {
        break missingId;
      }

      id = R.id.tv_select;
      TextView tvSelect = ViewBindings.findChildViewById(rootView, id);
      if (tvSelect == null) {
        break missingId;
      }

      return new ActivityNoiseBinding((LinearLayout) rootView, btnSelect, noise, recyclerViewNoises,
          tvQuestion, tvSelect);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
